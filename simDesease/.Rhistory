lambda <- 1
k <- c(1, 2, 4)
xx <- seq(0, 6, 0.01)
dweibull_k1 = dweibull(xx, shape = lambda, scale = k[1])
dweibull_k2 = dweibull(xx, shape = lambda, scale = k[2])
dweibull_k3 = dweibull(xx, shape = lambda, scale = k[3])
df <- data.frame("xx" = rep(xx, 3),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3),
"k" = c(rep("1", length(xx)), rep("2", length(xx)), rep("4", length(xx))))
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
lambda <- 1
k <- c(1, 2, 4)
xx <- seq(0, 6, 0.01)
dweibull_k1 = dweibull(xx, scale = lambda, shape = k[1])
dweibull_k2 = dweibull(xx, scale = lambda, shape = k[2])
dweibull_k3 = dweibull(xx, scale = lambda, shape = k[3])
df <- data.frame("xx" = rep(xx, 3),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3),
"k" = c(rep("1", length(xx)), rep("2", length(xx)), rep("4", length(xx))))
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
lambda <- 1
k <- c(1, 2, 4)
xx <- seq(0, 4, 0.01)
dweibull_k1 = dweibull(xx, scale = lambda, shape = k[1])
dweibull_k2 = dweibull(xx, scale = lambda, shape = k[2])
dweibull_k3 = dweibull(xx, scale = lambda, shape = k[3])
df <- data.frame("xx" = rep(xx, 3),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3),
"k" = c(rep("1", length(xx)), rep("2", length(xx)), rep("4", length(xx))))
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
0.5^20
0.3^8 * 0.7^12
0.5^20
0.4^8 * 0.6^12
# Importing the libraries
library(ggplot2)
library(ggpubr)
n <- 100000; z <- rnorm(n)
# inefficient code
inef_time_get <- function(){
time <- system.time({
zneg <- 0; j <- 1
for (i in 1:n){
if (z[i] < 0){
zneg[j] <- z[i]
j <- j + 1
}
}
})[["elapsed"]]
return(time)
}
# efficient code
ef_time_get <- function(){
time <- system.time({
zneg <- z[z < 0]
})[["elapsed"]]
return(time)
}
# Obtaining the timings for the two methods
iters <- 20
inefficient_code_timings <- c()
efficient_code_timings <- c()
for(i in 1:iters){
inef_time <- inef_time_get()
inefficient_code_timings <- c(inefficient_code_timings, inef_time)
ef_time <- ef_time_get()
efficient_code_timings <- c(efficient_code_timings, ef_time)
}
# Data Frame for GGplot2
df <- data.frame("timings" = c(inefficient_code_timings, efficient_code_timings),
"code" = c(rep("inefficient code", iters), rep("efficient code", iters)))
p <- ggplot(data = df, aes(y = timings, col = code)) + geom_boxplot() + theme_bw()
p
# Obtaining the timings for the two methods
iters <- 30
inefficient_code_timings <- c()
efficient_code_timings <- c()
for(i in 1:iters){
inef_time <- inef_time_get()
inefficient_code_timings <- c(inefficient_code_timings, inef_time)
ef_time <- ef_time_get()
efficient_code_timings <- c(efficient_code_timings, ef_time)
}
# Data Frame for GGplot2
df <- data.frame("timings" = c(inefficient_code_timings, efficient_code_timings),
"code" = c(rep("inefficient code", iters), rep("efficient code", iters)))
p <- ggplot(data = df, aes(y = timings, col = code)) + geom_boxplot() + theme_bw()
p
# Showing that the two methods obtain the same results
zneg_inef <- 0; j <- 1
for (i in 1:n){
if (z[i] < 0){
zneg_inef[j] <- z[i]
j <- j + 1
}
}
zneg_ef <- z[z < 0]
identical(zneg_inef, zneg_ef) # Returns True
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
# Inverting matrix A explicitly, and obtaining x as x = A^-1 * y
x.1 <- solve(A) %*% y
# Using solve() function directly to obtain x
x.2 <- solve(A, y)
# Assessing the times and the absolute errors for the two methods
iters <- 40
x.1_timings <- c()
x.1_errors <- c()
x.2_timings <- c()
x.2_errors <- c()
for(i in 1:iters){
A <- matrix(runif(n*n), n, n); x.true <- runif(n)
y <- A%*%x.true
# first method
x.1_time <- system.time({x.1 <- solve(A) %*% y})
x.1_timings <- c(x.1_timings, x.1_time)
x.1_err <- mean(abs(x.1 - x.true))
x.1_errors <- c(x.1_errors, x.1_err)
# second method
x.2_time <- system.time({x.2 <- solve(A, y)})
x.2_timings <- c(x.2_timings, x.2_time)
x.2_err <- mean(abs(x.2 - x.true))
x.2_errors <- c(x.2_errors, x.2_err)
}
# Data Frame for GGplot2
df1 <- data.frame("timings" = c(x.1_timings, x.2_timings),
"errors" = c(x.1_errors, x.2_errors),
"method" = c(rep("method 1", iters), rep("method 2", iters)))
p1 <- ggplot(data = df1, aes(y = log(errors), col = method)) + geom_boxplot() + theme_bw()
p2 <- ggplot(data = df1, aes(y = log(timings), col = method)) + geom_boxplot() + theme_bw()
ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="right")
# Assessing the times and the absolute errors for the two methods
iters <- 40
x.1_timings <- c()
x.1_errors <- c()
x.2_timings <- c()
x.2_errors <- c()
for(i in 1:iters){
A <- matrix(runif(n*n), n, n); x.true <- runif(n)
y <- A%*%x.true
# first method
x.1_time <- system.time({x.1 <- solve(A) %*% y})[["elapsed"]]
x.1_timings <- c(x.1_timings, x.1_time)
x.1_err <- mean(abs(x.1 - x.true))
x.1_errors <- c(x.1_errors, x.1_err)
# second method
x.2_time <- system.time({x.2 <- solve(A, y)})[["elapsed"]]
x.2_timings <- c(x.2_timings, x.2_time)
x.2_err <- mean(abs(x.2 - x.true))
x.2_errors <- c(x.2_errors, x.2_err)
}
# Data Frame for GGplot2
df1 <- data.frame("timings" = c(x.1_timings, x.2_timings),
"errors" = c(x.1_errors, x.2_errors),
"method" = c(rep("method 1", iters), rep("method 2", iters)))
p1 <- ggplot(data = df1, aes(y = log(errors), col = method)) + geom_boxplot() + theme_bw()
p2 <- ggplot(data = df1, aes(y = log(timings), col = method)) + geom_boxplot() + theme_bw()
ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="right")
p1 <- ggplot(data = df1, aes(y = errors, col = method)) + geom_boxplot() + theme_bw()
p2 <- ggplot(data = df1, aes(y = timings, col = method)) + geom_boxplot() + theme_bw()
ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="right")
# Assessing the times and the absolute errors for the two methods
iters <- 30
x.1_timings <- c()
x.1_errors <- c()
x.2_timings <- c()
x.2_errors <- c()
for(i in 1:iters){
A <- matrix(runif(n*n), n, n); x.true <- runif(n)
y <- A%*%x.true
# first method
x.1_time <- system.time({x.1 <- solve(A) %*% y})[["elapsed"]]
x.1_timings <- c(x.1_timings, x.1_time)
x.1_err <- mean(abs(x.1 - x.true))
x.1_errors <- c(x.1_errors, x.1_err)
# second method
x.2_time <- system.time({x.2 <- solve(A, y)})[["elapsed"]]
x.2_timings <- c(x.2_timings, x.2_time)
x.2_err <- mean(abs(x.2 - x.true))
x.2_errors <- c(x.2_errors, x.2_err)
}
# Data Frame for GGplot2
df1 <- data.frame("timings" = c(x.1_timings, x.2_timings),
"errors" = c(x.1_errors, x.2_errors),
"method" = c(rep("method 1", iters), rep("method 2", iters)))
p1 <- ggplot(data = df1, aes(y = errors, col = method)) + geom_boxplot() + theme_bw()
p2 <- ggplot(data = df1, aes(y = timings, col = method)) + geom_boxplot() + theme_bw()
ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="right")
# Importing the libraries
library(ggplot2)
library(ggpubr)
n <- 100000; z <- rnorm(n)
# inefficient code
inef_time_get <- function(){
time <- system.time({
zneg <- 0; j <- 1
for (i in 1:n){
if (z[i] < 0){
zneg[j] <- z[i]
j <- j + 1
}
}
})[["elapsed"]]
return(time)
}
# efficient code
ef_time_get <- function(){
time <- system.time({
zneg <- z[z < 0]
})[["elapsed"]]
return(time)
}
# Obtaining the timings for the two methods
iters <- 30
inefficient_code_timings <- c()
efficient_code_timings <- c()
for(i in 1:iters){
inef_time <- inef_time_get()
inefficient_code_timings <- c(inefficient_code_timings, inef_time)
ef_time <- ef_time_get()
efficient_code_timings <- c(efficient_code_timings, ef_time)
}
# Data Frame for GGplot2
df <- data.frame("timings" = c(inefficient_code_timings, efficient_code_timings),
"code" = c(rep("inefficient code", iters), rep("efficient code", iters)))
p <- ggplot(data = df, aes(y = timings, col = code)) + geom_boxplot() + theme_bw()
p
pnorm(-0.5)
x <- rnorm(10)
med <- median(x)
y = seq(-5, 5, 0.0001)
plot(y, sum(abs(x - y)))
lambda <- 1
k <- c(0.5, 1, 2, 4)
xx <- seq(0, 4, 0.01)
dweibull_k1 = dweibull(xx, scale = lambda, shape = k[1])
dweibull_k2 = dweibull(xx, scale = lambda, shape = k[2])
dweibull_k3 = dweibull(xx, scale = lambda, shape = k[3])
dweibull_k4 = dweibull(xx, scale = lambda, shape = k[4])
df <- data.frame("xx" = rep(xx, 4),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3, dweibull_k4),
"k" = c(rep("0.5", length(xx)), rep("1", length(xx)), rep("2", length(xx)), rep("4", length(xx))))
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
lambda <- 1
k <- c(1, 2, 4)
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
dweibull_k3 = dweibull(xx, scale = lambda, shape = k[3])
p
dweibull_k2 = dweibull(xx, scale = lambda, shape = k[2])
dweibull_k1 = dweibull(xx, scale = lambda, shape = k[1])
df <- data.frame("xx" = rep(xx, 3),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3),
"k" = c(rep("0.5", length(xx)), rep("1", length(xx)), rep("2", length(xx))))
xx <- seq(0, 4, 0.01)
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
lambda <- 1
k <- c(1, 2, 4)
xx <- seq(0, 4, 0.01)
dweibull_k1 = dweibull(xx, scale = lambda, shape = k[1])
dweibull_k2 = dweibull(xx, scale = lambda, shape = k[2])
dweibull_k3 = dweibull(xx, scale = lambda, shape = k[3])
df <- data.frame("xx" = rep(xx, 3),
"dweibull" = c(dweibull_k1, dweibull_k2, dweibull_k3),
"k" = c(rep("1", length(xx)), rep("2", length(xx)), rep("4", length(xx))))
p <- ggplot(data = df, aes(x = xx, y = dweibull, col = k)) + geom_line() + theme_bw()
p
mean(c(1.22, 3212.32, -32.43, 12.23, 34.08))
?rpart
iris
library(ggplot2)
library(dplyr)
ggpairs(iris)
install.packages("ggpairs")
install.packages(GGally)
install.packages("GGally")
library(GGally)
ggpairs(iris)
ggpairs(iris, aes(col = Species))
glimpse(iris)
install.packages("rpart")
library(rpart)
fit_sepal.length <- rpart(Sepal.Length ~ ., data = iris)
install.packages("caret")
library(caret)
View(fit_sepal.length)
plot(fit_sepal.length)
fit_sepal.length <- rpart(Sepal.Length ~ ., data = iris, method = "anova")
plot(fit_sepal.length)
fit_sepal.length <- rpart(Sepal.Length ~ ., data = iris, method = "anova")
plot(fit_sepal.length)
plot(fit_sepal.width)
fit_sepal.width <- rpart(Sepal.Width ~ ., data = iris, method = "anova")
plot(fit_sepal.width)
fit_sepal.length <- rpart(Sepal.Length ~ ., data = iris, method = "anova", xval = 10)
plot(fit_sepal.length)
fit_sepal.length <- rpart(Sepal.Length ~ ., data = iris, xval = 10)
plot(fit_sepal.length)
View(fit_sepal.length)
library(caret.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(caret.plot)
plot(fit_sepal.length)
library(caret.plot)
library(rpart.plot)
plot(fit_sepal.length)
library(rpart.plot)
plot(fit_sepal.length)
rpart.plot(fit_sepal.length)
View(fit_sepal.length)
fit_sepal.length$cptable
set.seed(42)
iris_shuffled <- iris[sample(nrow(iris)), ]
View(iris_shuffled)
folds <- createFolds(iris$Species, k = 10)
View(folds)
folds <- createFolds(iris, k = 10)
View(folds)
View(folds)
glimpse(iris)
iris_shuffled <- iris[sample(nrow(iris)), ]
numfold <- 10
foldim <- nrow(iris_shuffled) / numfold
fit_sepal.length.mape = c()
fit_sepal.width.mape = c()
fit_petal.length.mape = c()
fit_petal.width.mape = c()
fit_species = c()
for(i in 1:10){
test_iris <- dplyr::slice(iris_shuffled, (foldim*(i-1)+1):foldim*i)
train_iris <- iris_shuffled[-test_iris, ]
fit_sepal.length <- rpart(Sepal.Length ~ ., data = train_iris, method = "anova")
fit_sepal.length.mape <- c(fit_sepal.length.mape, MAPE(test_iris, fit_sepal.length, "Sepal.Length"))
fit_sepal.width <- rpart(Sepal.Width ~ ., data = train_iris, method = "anova")
fit_sepal.width.mape <- c(fit_sepal.width.mape, MAPE(test_iris, fit_sepal.width, "Sepal.Width"))
fit_petal.length <- rpart(Petal.Length ~ ., data = train_iris, method = "anova")
fit_petal.length.mape <- c(fit_petal.length.mape, MAPE(test_iris, fit_petal.length, "Petal.Length"))
fit_petal.width <- rpart(Petal.Width ~ ., data = train_iris, method = "anova")
fit_petal.width.mape <- c(fit_petal.width.mape, MAPE(test_iris, fit_sepal.length, "Petal.Width"))
fit_species <- rpart(Species ~ ., data = iris, method = "class")
}
for(i in 1:10){
test_iris <- dplyr::slice(iris_shuffled, (foldim*(i-1)+1):foldim*i)
test_indices <- as.numeric(rownames(test_iris))
train_iris <- iris_shuffled[-test_indices, ]
fit_sepal.length <- rpart(Sepal.Length ~ ., data = train_iris, method = "anova")
fit_sepal.length.mape <- c(fit_sepal.length.mape, MAPE(test_iris, fit_sepal.length, "Sepal.Length"))
fit_sepal.width <- rpart(Sepal.Width ~ ., data = train_iris, method = "anova")
fit_sepal.width.mape <- c(fit_sepal.width.mape, MAPE(test_iris, fit_sepal.width, "Sepal.Width"))
fit_petal.length <- rpart(Petal.Length ~ ., data = train_iris, method = "anova")
fit_petal.length.mape <- c(fit_petal.length.mape, MAPE(test_iris, fit_petal.length, "Petal.Length"))
fit_petal.width <- rpart(Petal.Width ~ ., data = train_iris, method = "anova")
fit_petal.width.mape <- c(fit_petal.width.mape, MAPE(test_iris, fit_sepal.length, "Petal.Width"))
fit_species <- rpart(Species ~ ., data = iris, method = "class")
}
MAPE <- function(test_set, model, y){
yhat <- predict(model, test_set)
mape <- abs((test_set$y - yhat) / test_set$y)
return( mean(mape) )
}
iris_shuffled <- iris[sample(nrow(iris)), ]
numfold <- 10
foldim <- nrow(iris_shuffled) / numfold
fit_sepal.length.mape = c()
fit_sepal.width.mape = c()
fit_petal.length.mape = c()
fit_petal.width.mape = c()
fit_species = c()
for(i in 1:10){
test_iris <- dplyr::slice(iris_shuffled, (foldim*(i-1)+1):foldim*i)
test_indices <- as.numeric(rownames(test_iris))
train_iris <- iris_shuffled[-test_indices, ]
fit_sepal.length <- rpart(Sepal.Length ~ ., data = train_iris, method = "anova")
fit_sepal.length.mape <- c(fit_sepal.length.mape, MAPE(test_iris, fit_sepal.length, "Sepal.Length"))
fit_sepal.width <- rpart(Sepal.Width ~ ., data = train_iris, method = "anova")
fit_sepal.width.mape <- c(fit_sepal.width.mape, MAPE(test_iris, fit_sepal.width, "Sepal.Width"))
fit_petal.length <- rpart(Petal.Length ~ ., data = train_iris, method = "anova")
fit_petal.length.mape <- c(fit_petal.length.mape, MAPE(test_iris, fit_petal.length, "Petal.Length"))
fit_petal.width <- rpart(Petal.Width ~ ., data = train_iris, method = "anova")
fit_petal.width.mape <- c(fit_petal.width.mape, MAPE(test_iris, fit_sepal.length, "Petal.Width"))
fit_species <- rpart(Species ~ ., data = iris, method = "class")
}
param_grid <- expand.grid(
.mtry = seq(from = 1, to = ncol(iris) - 1, by = 2),
.maxdepth = c(1, 2, 3, 4, 5)
)
View(param_grid)
View(param_grid)
library(dplyr)
library(ggplot2)
dati <- foglio_TMG_ATM_1_
dati <- dati[2:nrow(dati), ]
colnames(dati) <- c("paziente", "terapia",
"temporale_t1_dx", "temporale_t1_sx",
"massetere_t1_dx", "massetere_t1_sx",
"tfl_t1_dx", "tfl_t1_sx",
"temporale_t2_dx", "temporale_t2_sx",
"massetere_t2_dx", "massetere_t2_sx",
"tfl_t2_dx", "tfl_t2_sx")
for(i in 3:ncol(dati)){
dati[,i] <- as.numeric(unlist(dati[,i]))
}
dati_terapia <- dplyr::filter(dati, terapia == "FKT")
dati_tbait <- dplyr::filter(dati, terapia == "FKT + BITE")
ggplot(data = dati, aes(y = temporale_t2_dx - temporale_t1_dx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "muscolo temporale destro",
y = "") + theme_gray()
library(readxl)
foglio_TMG_ATM_1_ <- read_excel("Downloads/foglio TMG ATM (1).xlsx")
View(foglio_TMG_ATM_1_)
library(dplyr)
library(ggplot2)
dati <- foglio_TMG_ATM_1_
dati <- dati[2:nrow(dati), ]
colnames(dati) <- c("paziente", "terapia",
"temporale_t1_dx", "temporale_t1_sx",
"massetere_t1_dx", "massetere_t1_sx",
"tfl_t1_dx", "tfl_t1_sx",
"temporale_t2_dx", "temporale_t2_sx",
"massetere_t2_dx", "massetere_t2_sx",
"tfl_t2_dx", "tfl_t2_sx")
for(i in 3:ncol(dati)){
dati[,i] <- as.numeric(unlist(dati[,i]))
}
ggplot(data = dati, aes(y = temporale_t2_dx - temporale_t1_dx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "muscolo temporale destro",
y = "") + theme_gray()
ggplot(data = dati_terapia, aes(y = c(temporale_t1_dx, temporale_t2_dx),
x = c(rep("pre", nrow(dati_terapia)),
rep("post", nrow(dati_terapia))))) +
geom_point() + geom_line(aes(group = rep(rownames(dati), 2)))
ggplot(data = dati, aes(y = temporale_t2_sx - temporale_t1_sx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "muscolo temporale sinistro",
y = "") + theme_gray()
ggplot(data = dati, aes(y = massetere_t2_dx - massetere_t1_dx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "muscolo massetere destro",
y = "") + theme_gray()
ggplot(data = dati, aes(y = massetere_t2_sx - massetere_t1_sx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "muscolo massetere sinistro",
y = "") + theme_gray()
ggplot(data = dati, aes(y = tfl_t2_dx - tfl_t1_dx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "tfl destro",
y = "") + theme_gray()
ggplot(data = dati, aes(y = tfl_t2_sx - tfl_t1_sx, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "tfl sinistro",
y = "") + theme_gray()
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
CAL_JFL_1_ <- read_excel("Downloads/CAL, JFL (1).xlsx")
View(CAL_JFL_1_)
dati1 <- CAL_JFL_1_
dati1
dati1 <- dati1[2:nrow(dati1), ]
dati1 <- dati1 %>% select(-c("...5", "QUESTIONARIO", "...7"))
colnames(dati1) <- c("paziente", "terapia",
"mmo_t1", "mmo_t2",
"jfls_t1", "jfls_t2")
dati1
for(i in 3:ncol(dati1)){
dati1[,i] <- as.numeric(unlist(dati1[,i]))
}
dati1
ggplot(data = dati1, aes(y = mmo_t2 - mmo_t1, fill = terapia)) + geom_boxplot()
ggplot(data = dati1, aes(y = jfls_t2 - jfls_t1, fill = terapia)) + geom_boxplot()
ggplot(data = dati1, aes(y = mmo_t2 - mmo_t1, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "Apertura bocca (mm)",
y = "") + theme_gray()
ggplot(data = dati1, aes(y = jfls_t2 - jfls_t1, fill = terapia)) +
geom_boxplot() + labs(title = "Confronto dell'efficacia delle terapie.",
subtitle = "JFLS",
y = "") + theme_gray()
library(ggplot2)
# setwd("Desktop/programs/advanced_programming/simDesease/")
data <- read.csv("results.csv")
df <- data.frame(
"time" = rep(data$i, ncol(data)-1),
"count" = c(data$vulnerable, data$exposed,
data$infected, data$recovered),
"status" = c(rep("vulnerable", nrow(data)),
rep("exposed", nrow(data)),
rep("infected", nrow(data)),
rep("recovered", nrow(data)))
)
setwd("Desktop/programs/advanced_programming/simDesease/")
data <- read.csv("results.csv")
df <- data.frame(
"time" = rep(data$i, ncol(data)-1),
"count" = c(data$vulnerable, data$exposed,
data$infected, data$recovered),
"status" = c(rep("vulnerable", nrow(data)),
rep("exposed", nrow(data)),
rep("infected", nrow(data)),
rep("recovered", nrow(data)))
)
ggplot(data=df, aes(x = time, y = count, col=status)) + geom_line(linewidth=1.1) +
labs(title="Number of subjects, conditioned on illness status.",
y="", x="time") + theme_gray()
